module utils

imports
  libstratego-lib
  libjava-front
  aspectj/pretty-print
  
strategies

	gen-synthetic-method-name =
		base_name := <id>;
		!<debug><concat-strings>[base_name, <int-to-string><abs><next-random>]

	add-var(|name, type) =
		<hashtable-put(|name, type)><id>

	discover-return-type =
		stmt* := <topdown(try(\ ClassBody(_) -> ClassBody([]) \))><id>;
		<debug>"discover-return-type";//<debug>stmt*;
		var2type := <new-hashtable>;
		<fetch-elem(discover-return-type-impl(|var2type))>stmt*
	
	discover-return-type-impl(|var2type) =
		node := <id>;
		<debug>"at discover-return-type-impl"; <debug>node;
		switch id
			case ?Block(stmt*):
				<fetch-elem(discover-return-type-impl(|<hashtable-copy>var2type))>stmt*

			case ?LocalVarDecStm(LocalVarDec(_, type, var*)):
				<map(add-var(|type, var2type))>var*; fail

			case ?If(_, stmt*):
				<discover-return-type-impl(|<hashtable-copy>var2type)><debug>stmt*

			case ?If(_, stmt1*, stmt2*):
				if type := <discover-return-type-impl(|<hashtable-copy>var2type)>stmt1*
				then
					<id>type
				else
					<discover-return-type-impl(|<hashtable-copy>var2type)>stmt2*
				end

			case ?For(_, _, _, stmt):
				<discover-return-type-impl(|<hashtable-copy>var2type)>stmt

			case ?ForEach(_, _, stmt):
				<discover-return-type-impl(|<hashtable-copy>var2type)>stmt

			case ?While(_, stmt):
				<discover-return-type-impl(|<hashtable-copy>var2type)>stmt

			case ?DoWhile(stmt, _):
				<discover-return-type-impl(|<hashtable-copy>var2type)>stmt

			case ?Return(Some(stmt)):
				<get-type-from-return-stmt(|var2type)>stmt
		end

	add-var(|type, var2type) =
		or(?VarDec(Id(name)), ?VarDec(Id(name), _));
		<add-var(|name, type)>var2type
	
	get-type-from-return-stmt(|var2type) =
		node := <id>;

		switch id
			case or(?Eq(_, _), ?NotEq(_, _)):
				!Boolean()

			case or(?Plus(_), ?Minus(_)):
				!Double()

			case or(?Plus(Lit(String(_)), _), ?Plus(_, Lit(String(_)))):
				!ClassOrInterfaceType(TypeName(Id("String")), None())

			case or(
					or(?Plus(Lit(Float(_)), _), ?Plus(_, Lit(Float(_)))),
					or(?Plus(Lit(Deci(_)), _), ?Plus(_, Lit(Deci(_))))):
				!Double()

			case ?Minus(_, _):
				!Double()

			case ?Mul(_, _):
				!Double()

			case ?Remain(_, _):
				!Double()

			case ?Div(_, _):
				!Double()

			case ?ExprName(Id(name)):
				<hashtable-get(|name)>var2type

			case ?Lit(type):
				<cast-return-type>type

			otherwise:
				<debug>"at get-type-from-return-stmt#otherwise";
				fail
		end

	cast-return-type =
  	node := <id>;
	switch <id>node
	  case ?Byte():
	       !Byte()
	  case or(?Char(), ?Char(_)):
	       !Char()
	  case ?Short():
	       !Double()
	  case ?Int():
	       !Double()
	  case ?Long():
	       !Double()
	  case ?Deci(_):
	       !Double()
	  case or(?Float(), ?Float(_)):
	       !Double()
	  case ?Double():
	       !Double()
	  case ?String(_):
	  	   !ClassOrInterfaceType(TypeName(Id("String")), None())
	  otherwise:
		<debug>"cast-return-type#otherwise"; <debug>node;
		fail
	end