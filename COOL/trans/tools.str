module tools

imports
  include/cool
  
rules
	//----------------------------------------------------
	fetch_class_name: TypeName(_, Id(name)) -> name
	fetch_class_name: TypeName(Id(name)) -> name
	//----------------------------------------------------
	fetch_full_class_name: TypeName(packageOrTypeName, Id(name)) -> <concat-strings>[<fetch_full_class_name>packageOrTypeName, ".", name]
	fetch_full_class_name: TypeName(Id(name)) -> name
	fetch_full_class_name: PackageOrTypeName(Id(name)) ->name
	fetch_full_class_name: PackageOrTypeName(packageOrTypeName, Id(name)) -> <concat-strings>[<fetch_full_class_name>packageOrTypeName, ".", name]
	//----------------------------------------------------
	pp-type =
	  node := <id>;
	  switch <id>node
	    case ?Byte():
	    	 !"byte"
	    case ?Char():
	    	 !"char"
	    case ?Boolean():
	    	 !"boolean"
	    case ?Short():
	    	 !"short"
	    case ?Int():
	     	 !"int"
	    case ?Long():
	    	 !"long"
	    case ?Float():
	    	 !"float"
	    case ?Double():
	    	 !"double"
	    otherwise:
		<fail>""
	  end
	  
	pp-type:
	    ArrayType(type) -> <concat-strings>[<pp-type>type,"[]"]

	pp-type:
		ClassOrInterfaceType(TypeName(Id(name)), _) -> name
	
	pp-type:
		ClassOrInterfaceType(TypeName(package, Id(name)), _) -> <concat-strings>[<pp-type>package ,".", name]
	  
	pp-type:
		PackageOrTypeName(Id(name)) -> name
	
	pp-type:
	    PackageOrTypeName(package, Id(name)) -> <concat-strings>[<pp-type>package, ".", name]