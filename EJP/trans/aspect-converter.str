module aspect-converter

imports
	libstratego-lib
	aspectj/pretty-print
	include/ejp
	utils
strategies
	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name):
		ExplicitJoinPointPattern(MethodPattern(AnnoPattern(annos), ModPattern(mods), return_value, name, params, throws)) -> 
		MethodPattern(AnnoPattern(<conc>(annos, [SimpleAnnoPatternExact(TypeName(Id("ExplicitJoinPoint")))])), 
					  ModPattern(<conc>(mods, [Static(), Final()])),
					  return_value,
					  name,
					  params,
					  throws)

	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name) =
		source := <id>;
		<or(?ExplicitJoinPointPattern(MemberName(_)), ?ExplicitJoinPointPattern(MemberName(_, _)))>source;
		<?ExplicitJoinPointPattern(name)>source;
		!MethodPattern(AnnoPattern([SimpleAnnoPatternExact(TypeName(Id("ExplicitJoinPoint")))]),
					  ModPattern([]),
					  RefTypePattern(NamePattern("*")),
					  <gen_ejp_name>name,
					  [FormalWildcard()],
					  None())

	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name):
		NotExplicitJoinPointPattern(MethodPattern(AnnoPattern(annos), ModPattern(mods), return_value, name, params, throws)) -> 
		MethodPattern(AnnoPattern(<conc>(annos, [Not(SimpleAnnoPatternExact(TypeName(Id("ExplicitJoinPoint"))))])), 
					  ModPattern(<conc>(mods, [Static(), Final()])),
					  return_value,
					  name,
					  params,
					  throws)

	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name) =
		source := <id>;
		<or(?NotExplicitJoinPointPattern(MemberName(_)), ?NotExplicitJoinPointPattern(MemberName(_, _)))>source;
		<?NotExplicitJoinPointPattern(name)>source;
		!MethodPattern(AnnoPattern([Not(SimpleAnnoPatternExact(TypeName(Id("ExplicitJoinPoint"))))]),
					  ModPattern([]),
					  RefTypePattern(NamePattern("*")),
					  <gen_ejp_name>name,
					  [FormalWildcard()],
					  None())

	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name):
		 ExplicitJoinPointScopePattern(MethodPattern(AnnoPattern(annos), mod_pattern, return_value, name, params, throws)) ->
		 MethodPattern(AnnoPattern(<conc>(annos, [SimpleAnnoPatternExact(TypeName(Id("ExplicitScopedJoinPoint")))])), 
					  mod_pattern,
					  return_value,
					  <gen_ejpscope_method_name(|package_name, aspect_name)>name,
					  params,
					  throws)

	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name) =
		source := <id>;
		<or(?ExplicitJoinPointScopePattern(MemberName(_)), ?ExplicitJoinPointScopePattern(MemberName(_, _)))>source;
		<?ExplicitJoinPointScopePattern(name)>source;
		!MethodPattern(AnnoPattern([SimpleAnnoPatternExact(TypeName(Id("ExplicitScopedJoinPoint")))]), 
					  ModPattern([]),
					  RefTypePattern(NamePattern("*")),
					  <gen_ejpscope_method_name(|package_name, aspect_name)>name,
					  [FormalWildcard()],
					  None())
	
	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name):
		NotExplicitJoinPointScopePattern(MethodPattern(AnnoPattern(annos), mod_pattern, return_value, name, params, throws)) ->
		MethodPattern(AnnoPattern(<conc>(annos, [Not(SimpleAnnoPatternExact(TypeName(Id("ExplicitScopedJoinPoint"))))])),
					  mod_pattern,
					  return_value,
					  <gen_ejpscope_method_name(|package_name, aspect_name)>name,
					  params,
					  throws)

	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name) =
		source := <id>;
		<or(?NotExplicitJoinPointScopePattern(MemberName(_)), ?NotExplicitJoinPointScopePattern(MemberName(_, _)))>source;
		<?NotExplicitJoinPointScopePattern(name)>source;
		!MethodPattern(AnnoPattern([Not(SimpleAnnoPatternExact(TypeName(Id("ExplicitScopedJoinPoint"))))]), 
					  ModPattern([]),
					  RefTypePattern(NamePattern("*")), 
					  <gen_ejpscope_method_name(|package_name, aspect_name)>name, 
					  [FormalWildcard()],
					  None())

	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name):
		DecNoMatch(ByPackageGranularity(), exp1, exp2, error) ->
		MethodDec(
            MethodDecHead(
              [ Anno(
                  TypeName(Id("NoMatch"))
                , [ ElemValPair(Id("expr"), Lit(String([Chars(<pp-aspectj-string>exp2)])))
                  , ElemValPair(Id("error"), Lit(error))
                  , ElemValPair(Id("granularity"), Lit(String([Chars("package")])))
                  ]
                )
              , SingleElemAnno(
                  TypeName(
                    PackageOrTypeName(
                      PackageOrTypeName(
                        PackageOrTypeName(PackageOrTypeName(Id("org")), Id("aspectj"))
                      , Id("lang")
                      )
                    , Id("annotation")
                    )
                  , Id("Pointcut")
                  )
                , Lit(String([Chars(<concat-strings>["this(obj) && ", <pp-aspectj-string>exp1])]))
                )
              , Private()
              ]
            , None()
            , Void()
            , Id(<gen_nomatch_pointcut_name>)
            , [Param(
                 []
               , ClassOrInterfaceType(TypeName(Id("Object")), None())
               , Id("obj")
               )]
            , None()
            )
          , Block([])
          )

	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name):
		DecNoMatch(ByClassGranularity(), exp1, exp2, error) ->
		MethodDec(
            MethodDecHead(
              [ Anno(
                  TypeName(Id("NoMatch"))
                , [ ElemValPair(Id("expr"), Lit(String([Chars(<pp-aspectj-string>exp2)])))
                  , ElemValPair(Id("error"), Lit(error))
                  , ElemValPair(Id("granularity"), Lit(String([Chars("class")])))
                  ]
                )
              , SingleElemAnno(
                  TypeName(
                    PackageOrTypeName(
                      PackageOrTypeName(
                        PackageOrTypeName(PackageOrTypeName(Id("org")), Id("aspectj"))
                      , Id("lang")
                      )
                    , Id("annotation")
                    )
                  , Id("Pointcut")
                  )
                , Lit(String([Chars(<concat-strings>["this(obj) && ", <pp-aspectj-string>exp1])]))
                )
              , Private()
              ]
            , None()
            , Void()
            , Id(<gen_nomatch_pointcut_name>)
            , [Param(
                 []
               , ClassOrInterfaceType(TypeName(Id("Object")), None())
               , Id("obj")
               )]
            , None()
            )
          , Block([])
          )

	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name):
		DecNoMatch(ByEjpGranularity(), exp1, exp2, error) ->
		MethodDec(
            MethodDecHead(
              [ Anno(
                  TypeName(Id("NoMatch"))
                , [ ElemValPair(Id("expr"), Lit(String([Chars(<pp-aspectj-string>exp2)])))
                  , ElemValPair(Id("error"), Lit(error))
                  , ElemValPair(Id("granularity"), Lit(String([Chars("ejp")])))
                  ]
                )
              , SingleElemAnno(
                  TypeName(
                    PackageOrTypeName(
                      PackageOrTypeName(
                        PackageOrTypeName(PackageOrTypeName(Id("org")), Id("aspectj"))
                      , Id("lang")
                      )
                    , Id("annotation")
                    )
                  , Id("Pointcut")
                  )
                , Lit(String([Chars(<concat-strings>["@withincode(anno) && @withincode(ejps.runtime.ExplicitScopedJoinPoint) && ", <pp-aspectj-string>exp1])]))
                )
              , Private()
              ]
            , None()
            , Void()
            , Id(<gen_nomatch_pointcut_name>)
            , [Param(
                 []
               , ClassOrInterfaceType(TypeName(Id("MethodAnno")), None())
               , Id("anno")
               )]
            , None()
            )
          , Block([])
          )
          
	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name):
		DecNoMatch(ByMethodGranularity(), exp1, exp2, error) ->
		MethodDec(
            MethodDecHead(
              [ Anno(
                  TypeName(Id("NoMatch"))
                , [ ElemValPair(Id("expr"), Lit(String([Chars(<pp-aspectj-string>exp2)])))
                  , ElemValPair(Id("error"), Lit(error))
                  , ElemValPair(Id("granularity"), Lit(String([Chars("method")])))
                  ]
                )
              , SingleElemAnno(
                  TypeName(
                    PackageOrTypeName(
                      PackageOrTypeName(
                        PackageOrTypeName(PackageOrTypeName(Id("org")), Id("aspectj"))
                      , Id("lang")
                      )
                    , Id("annotation")
                    )
                  , Id("Pointcut")
                  )
                , Lit(String([Chars(<concat-strings>["@withincode(anno) && !@withincode(ejps.runtime.ExplicitScopedJoinPoint) && ", <pp-aspectj-string>exp1])]))
                )
              , Private()
              ]
            , None()
            , Void()
            , Id(<gen_nomatch_pointcut_name>)
            , [Param(
                 []
               , ClassOrInterfaceType(TypeName(Id("MethodAnno")), None())
               , Id("anno")
               )]
            , None()
            )
          , Block([])
          )
					  				  
	ejp-to-ajc(|pointcutargs_pointcuts, package_name, aspect_name):
		ExplicitJoinPointDeclaration(header, pointcutargs, handles, throws, defaultvalue) -> MethodDec(method_head, method_body)
	with
		<gen-pointcutargs-pointcuts(|pointcutargs_pointcuts)>(pointcutargs, header);
		method_head := <gen-method-head(|header, handles, throws)>;
		MethodDecHead(_, _, return_type, _, _, _) := method_head;
		method_body := <gen-method-body(|defaultvalue, return_type)>

	gen-pointcutargs-pointcuts(|pointcutargs_pointcuts_set) =
		?(Some(PointcutargsDec(pointcutargs*)),
		  <or(?NonScopedExplicitJoinPointPHeader(_, declarator), ?ScopedExplicitJoinPointPHeader(_, declarator))>);
		<iset-add(|
		AspectDec(
            AspectDecHead(
              [Public(), Static()]
            , Id(< \ ExplicitJoinPointDeclarator(_, Id(pointcut_name), _) -> pointcut_name \ > declarator)
            , None()
            , None()
            , None()
            , None()
            )
          , AspectBody(
              <map( \ x -> <convet-pointcutarg-to-pointcut>x \ )>pointcutargs*
            )
          ))>pointcutargs_pointcuts_set
		//<map( \ x -> <iset-add(|<convet-pointcutarg-to-pointcut>(x, declarator))>pointcutargs_pointcuts_set \ )>pointcutargs*
	
	gen-pointcutargs-pointcuts(|pointcutargs_pointcuts_set) =
		?(None(),_);
		id
	
	convet-pointcutarg-to-pointcut =
		?(PointcutargDec(pointcutarg_id, params*));
		!PointcutDec(
            PointcutDecHead(
              [Public()]
            , pointcutarg_id
            , params*
            )
          , NoPointcutBody()
          )
			
	gen-method-head(|header, handles, throws) = 
		<or(?NonScopedExplicitJoinPointPHeader(modifier, declarator), ?ScopedExplicitJoinPointPHeader(modifier, declarator))>header;
		<?ExplicitJoinPointDeclarator(return_type, name, params)>declarator;
		joinpoint_annotation := <gen-ejp-annotation(|handles)>;
		!MethodDecHead([joinpoint_annotation, modifier, Static(), Final()], 
					   None(),
					   return_type,
					   name,
					   params,
					   throws)

	// Doesn't matter if that's scoped ejp or regular ejp  
	gen-ejp-annotation(|handles) = 
		!Anno(TypeName(Id("ExplicitJoinPoint"))
	        , [ ElemValPair(
	              Id("handles")
	            , ElemValArrayInit(<map( \ ClassType(x, _) -> Lit(String([Chars(<pp-aspectj-string>x)])) \ )><fetch-handles-list>handles)
	            )
	          ]
	        )
		// !Anno(TypeName(Id("ExplicitJoinPoint")),[ ElemValPair(Id("handles"),ElemValArrayInit(<fetch-handles-list>handles)) ])
	
	gen-method-body(|default_value, return_type) =
		if <equal>(<strip-annos>default_value, None())
		then
			!Block([Return(<get-default-return-value-for-return-type>return_type)])
		else
			!Block([Return(Some(<fetch-default-value>default_value))])
		end
		
	get-default-return-value-for-return-type =
		return_type := <id>;
		switch <strip-annos>return_type
			case ?Void(): !None()
			case ?Int() : !Some(Lit(Deci("0")))
			case ?Long() : !Some(Lit(Deci("0")))
			case ?Short() : !Some(Lit(Deci("0")))
			case ?Byte() : !Some(Lit(Deci("0")))
			case ?Double() : !Some(Lit(Deci("0")))
			case ?Float() : !Some(Lit(Deci("0")))
			case ?Boolean() : !Some(Lit(False()))
			otherwise: !Some(Lit(Null()))
		end
		
	fetch-default-value: Some(ExplicitJoinPointInitializer(expr)) -> expr
    fetch-default-value: None() -> None()
    
    fetch-handles-list: Some(Handles(types*)) -> types*
	fetch-handles-list: None() -> []
	
	remove-ejp-decs:
		ExplicitJoinPointDeclaration(_, _, _, _, _) -> None()

	remove-ejp-decs:
		DecNoMatch(_, _, _, _) -> None()

	remove-ejp-decs:
		ExplicitJoinPointPattern(_) -> None()
	
	remove-ejp-decs:
		NotExplicitJoinPointPattern(_) -> None()
		
	remove-ejp-decs:
		ExplicitJoinPointScopePattern(_) -> None()
	
	remove-ejp-decs:
		NotExplicitJoinPointScopePattern(_) -> None()
