module aspect-converter

imports
	include/Closure
	aspectj/pretty-print
	utils
	replace_exhibits

strategies
	remove-closures-additions:
		JoinpointDeclaration(_, _, _, _) -> None()

	remove-closures-additions:
		ShortClosureJoinpoints(_, _) -> None()

	remove-closures-additions:
		ClosureJoinpoints(_, _, _, _) -> None()

	closures-to-ajc(|package_name) =
		?AspectDec(head, AspectBody(stms*));
		<?AspectDecHead(_, Id(aspect_name), _, _, _, _)>head;
		aspect := <id>;
		amethods := <new-hashtable>;
		stmt' := <topdown(try(closures-to-ajc(|amethods, package_name, aspect_name)))>stms*;
		<replace(|None(), <new-hashtable>)>AspectDec(head, AspectBody(stmt'))

	closures-to-ajc(|amethods, package_name, aspect_name) =
		?JoinpointDeclaration(return_type, jp_id, params, throws);
		!MethodDec(
			MethodDecHead([Public(), Static()], None(), return_type, jp_id, params, throws),
			<gen-joinpoint-body(|return_type)>
		)

	closures-to-ajc(|amethods, package_name, aspect_name) =
		?CJPAdvice(mods, CJPAround(return_type, Id(jp_name), params), throws, block);
		!AdviceDec(mods, Around(return_type, params), None(),
		 AndComp(
			 Call(
			 	MethodPattern(
	                AnnoPattern([SimpleAnnoPatternExact(TypeName(Id("Closure")))])
	              , ModPattern([])
	              , RefTypePattern(NamePattern("*"))
	              , MemberName(jp_name)
	              , <map( \ Param(_, x, _) -> RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))) \ )>params
	              , None()
	              )
			 ),
			 Args(<map( \ Param(_, _, Id(x)) -> ClassOrInterfaceType(TypeName(Id(x)), None()) \ )>params)
		 )
		 , block)

	closures-to-ajc(|amethods, package_name, aspect_name) =
		?CJPAdvice(mods, CJPBefore(Id(jp_name), params), throws, block);
		!AdviceDec(mods, Before(params), None(),
		AndComp(
			 Call(
			 	MethodPattern(
	                AnnoPattern([SimpleAnnoPatternExact(TypeName(Id("Closure")))])
	              , ModPattern([])
	              , RefTypePattern(NamePattern("*"))
	              , MemberName(jp_name)
	              , <map( \ Param(_, x, _) -> RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))) \ )>params
	              , None()
	              )
			 ),
			 Args(<map( \ Param(_, _, Id(x)) -> ClassOrInterfaceType(TypeName(Id(x)), None()) \ )>params)
		 )
		 , block)


	closures-to-ajc(|amethods, package_name, aspect_name) =
		?CJPAdvice(mods, CJPAfter(Id(jp_name), params), throws, block);
		!AdviceDec(mods, After(params, None()), None(),
		AndComp(
			 Call(
			 	MethodPattern(
	                AnnoPattern([SimpleAnnoPatternExact(TypeName(Id("Closure")))])
	              , ModPattern([])
	              , RefTypePattern(NamePattern("*"))
	              , MemberName(jp_name)
	              , <map( \ Param(_, x, _) -> RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))) \ )>params
	              , None()
	              )
			 ),
			 Args(<map( \ Param(_, _, Id(x)) -> ClassOrInterfaceType(TypeName(Id(x)), None()) \ )>params)
		 )
		 , block)


   gen-joinpoint-body(|return_type) =
        !Block([Return(Some(<get-default-return-value-for-return-type>return_type))])
		
	get-default-return-value-for-return-type =
		return_type := <id>;
		switch <id>return_type
			case ?Void(): !None()
			case ?Int() : !Some(Lit(Deci("0")))
			case ?Long() : !Some(Lit(Deci("0")))
			case ?Short() : !Some(Lit(Deci("0")))
			case ?Byte() : !Some(Lit(Deci("0")))
			case ?Double() : !Some(Lit(Deci("0")))
			case ?Float() : !Some(Lit(Deci("0")))
			case ?Boolean() : !Some(Lit(False()))
			otherwise: !Some(Lit(Null()))
		end
