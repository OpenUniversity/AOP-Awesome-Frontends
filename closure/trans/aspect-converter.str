module aspect-converter

imports
	include/Closure
	aspectj/pretty-print
	utils
	java-converter
	libjava-front

strategies
	remove-closures-additions:
		JoinpointDeclaration(_, _, _, _) -> None()

	remove-closures-additions:
		ShortClosureJoinpoints(_, _) -> None()

	remove-closures-additions:
		ClosureJoinpoints(_, _, _, _) -> None()

	remove-closures-additions:
		CJPAdvice(_, _, _, _) -> None()

	closures-to-ajc(|package_name) =
		?AspectDec(head, AspectBody(stms*));
		<?AspectDecHead(_, Id(aspect_name), _, _, _, _)>head;
		stmt' := <topdown(try(closure-to-java-impl))><topdown(try(closures-to-ajc(|package_name, aspect_name)))>stms*;
		!AspectDec(head, AspectBody(stmt'))

	closures-to-ajc(|package_name, aspect_name) =
		?JoinpointDeclaration(return_type, jp_id, params, throws);
		<joinpoint(|<joinpoint-params-to-string>params, return_type, throws)>jp_id;
		!MethodDec(
			MethodDecHead([Private(), Static(), MarkerAnno(TypeName(Id("Joinpoint")))], None(), return_type, jp_id, params, throws),
			Block([
				Throw(
                  NewInstance(
                    None()
                  , ClassOrInterfaceType(TypeName(Id("UnsupportedOperationException")), None())
                  , []
                  , None()
                  )
                )
			]))

	joinpoint-params-to-string =
		!(<concat-strings><map(\ Param(_, x, _) -> <conc-strings>(",", <pp-java5-to-string>x) \)><id>)

	closures-to-ajc(|package_name, aspect_name) =
		?CJPAdvice(mods, CJPAround(return_type, Id(jp_name), params), throws, block);
		!AdviceDec(mods, Around(return_type, params), None(),
		 AndComp(
			 Call(
			 	MethodPattern(
	                AnnoPattern([SimpleAnnoPatternExact(TypeName(Id("Closure")))])
	              , ModPattern([])
	              , RefTypePattern(NamePattern("*"))
	              , MemberName(jp_name)
	              , <map( \ Param(_, x, _) -> RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))) \ )>params
	              , None()
	              )
			 ),
			 Args(<map( \ Param(_, _, Id(x)) -> ClassOrInterfaceType(TypeName(Id(x)), None()) \ )>params)
		 )
		 , block)

	closures-to-ajc(|package_name, aspect_name) =
		?CJPAdvice(mods, CJPBefore(Id(jp_name), params), throws, block);
		!MethodDec(
            MethodDecHead(
              [ SingleElemAnno(
                  TypeName(Id("Before"))
                , Lit(String([Chars(<pp-aspectj-string>
                  AndComp(
                  	Call(
					    MethodPattern(
		                AnnoPattern([SimpleAnnoPatternExact(TypeName(Id("Closure")))])
			              , ModPattern([])
			              , RefTypePattern(NamePattern("*"))
			              , MemberName(jp_name)
			              , <map( \ Param(_, x, _) -> RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))) \ )>params
			              , None()
			              )
					 ),
					 Args(
		                	<map( \ Param(_, _, x) -> ClassOrInterfaceType(TypeName(Id(<pp-aspectj-string>x)), None()) \ )>params
					 )))]))
				)
              , Anno(
                  TypeName(Id("JoinpointSignature"))
                , [ ElemValPair(
                      Id("args")
                    , ElemValArrayInit(
                      	<map( \ Param(_, x, _) -> Lit(Class(RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))))) \ )>params
                      )
                    )
                  , ElemValPair(
                      Id("name")
                    , Lit(String([Chars(jp_name)]))
                    )
                  ]
                )
              , Public()
              ]
            , None()
            , Void()
            , Id(<gen-synthetic-method-name>jp_name)
            , <conc>([Param(
	                 []
	               , ClassOrInterfaceType(TypeName(Id("ProceedingJoinPoint")), None())
	               , Id("pjp")
	               ),
	               Param(
	                 []
	               , ClassOrInterfaceType(TypeName(Id("JoinPoint")), None())
	               , Id("thisJoinPoint")
	               )
	               ], params)
            , throws
            )
          , block
          )

	closures-to-ajc(|package_name, aspect_name) =
		?CJPAdvice(mods, CJPAfter(Id(jp_name), params), throws, block);
		!MethodDec(
            MethodDecHead(
              [ SingleElemAnno(
                  TypeName(Id("After"))
                , Lit(String([Chars(<pp-aspectj-string>
                  AndComp(
                  	Call(
					    MethodPattern(
		                AnnoPattern([SimpleAnnoPatternExact(TypeName(Id("Closure")))])
			              , ModPattern([])
			              , RefTypePattern(NamePattern("*"))
			              , MemberName(jp_name)
			              , <map( \ Param(_, x, _) -> RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))) \ )>params
			              , None()
			              )
					 ),
					 Args(
		                	<map( \ Param(_, _, x) -> ClassOrInterfaceType(TypeName(Id(<pp-aspectj-string>x)), None()) \ )>params
					 )))]))
				)
              , Anno(
                  TypeName(Id("JoinpointSignature"))
                , [ ElemValPair(
                      Id("args")
                    , ElemValArrayInit(
                      	<map( \ Param(_, x, _) -> Lit(Class(RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))))) \ )>params
                      )
                    )
                  , ElemValPair(
                      Id("name")
                    , Lit(String([Chars(jp_name)]))
                    )
                  ]
                )
              , Public()
              ]
            , None()
            , Void()
            , Id(<gen-synthetic-method-name>jp_name)
            , <conc>([Param(
	                 []
	               , ClassOrInterfaceType(TypeName(Id("ProceedingJoinPoint")), None())
	               , Id("pjp")
	               ),
	               Param(
	                 []
	               , ClassOrInterfaceType(TypeName(Id("JoinPoint")), None())
	               , Id("thisJoinPoint")
	               )
	               ], params)
            , throws
            )
          , block
          )

	closures-to-ajc(|package_name, aspect_name) =
		?CJPAdvice(mods, CJPAfterReturning(Id(jp_name), params, Some(CJPSingleParam(Some(param)))), throws, block);
		!MethodDec(
            MethodDecHead(
              [ Anno(
                  TypeName(Id("AfterReturning"))
                , [ElemValPair(Id("pointcut"), Lit(String([Chars(<pp-aspectj-string>Call(
							    MethodPattern(
				                AnnoPattern([SimpleAnnoPatternExact(TypeName(Id("Closure")))])
					              , ModPattern([])
					              , RefTypePattern(NamePattern("*"))
					              , MemberName(jp_name)
					              , <map( \ Param(_, x, _) -> RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))) \ )>params
					              , None()
					              )
							 ))])))
					, ElemValPair(Id("returning"),
					  <\ Param(_, _, x) -> Lit(String([Chars(<pp-java-string>x)])) \>param)
				  ]
                )
              , Anno(
                  TypeName(Id("JoinpointSignature"))
                , [ ElemValPair(
                      Id("args")
                    , ElemValArrayInit(
                      	<map( \ Param(_, x, _) -> Lit(Class(RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))))) \ )>params
                      )
                    )
                  , ElemValPair(
                      Id("name")
                    , Lit(String([Chars(jp_name)]))
                    )
                  ]
                )
              , Public()
              ]
            , None()
            , Void()
            , Id(jp_name)
            , [param]
            , None()
            )
          , block
          )

	closures-to-ajc(|package_name, aspect_name) =
		?CJPAdvice(mods, CJPAfterThrowing(Id(jp_name), params, Some(CJPSingleParam(Some(param)))), throws, block);
		!MethodDec(
            MethodDecHead(
              [ Anno(
                  TypeName(Id("AfterThrowing"))
                , [ElemValPair(Id("pointcut"), Lit(String([Chars(<pp-aspectj-string>Call(
							    MethodPattern(
				                AnnoPattern([SimpleAnnoPatternExact(TypeName(Id("Closure")))])
					              , ModPattern([])
					              , RefTypePattern(NamePattern("*"))
					              , MemberName(jp_name)
					              , <map( \ Param(_, x, _) -> RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))) \ )>params
					              , None()
					              )
							 ))])))
					, ElemValPair(Id("throwing"),
					  <\ Param(_, _, x) -> Lit(String([Chars(<pp-java-string>x)])) \>param)
				  ]
                )
              , Anno(
                  TypeName(Id("JoinpointSignature"))
                , [ ElemValPair(
                      Id("args")
                    , ElemValArrayInit(
                      	<map( \ Param(_, x, _) -> Lit(Class(RegularTypePattern(RefTypePattern(NamePattern(<pp-aspectj-string>x))))) \ )>params
                      )
                    )
                  , ElemValPair(
                      Id("name")
                    , Lit(String([Chars(jp_name)]))
                    )
                  ]
                )
              , Public()
              ]
            , None()
            , Void()
            , Id(jp_name)
            , [param]
            , None()
            )
          , block
          )

	 external joinpoint(|arg1, arg2, arg3)
