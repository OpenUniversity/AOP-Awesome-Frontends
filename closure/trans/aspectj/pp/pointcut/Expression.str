/**
 * Pretty-printing Pointcut Expressionbs
 *
 * @author Martin Bravenboer <martin.bravenboer@gmail.com>
 */
module aspectj/pp/pointcut/Expression
imports
	libstratego-gpp
	
rules

  aspectj-to-box :
    Call(b) -> H hs=0 [KW["call"] "(" b ")"]

  aspectj-to-box :
    Exec(b) -> H hs=0 [KW["execution"] "(" b ")"]

  aspectj-to-box :
    InitExec(b) -> H hs=0 [KW["initialization"] "(" b ")"]

  aspectj-to-box :
    PreInitExec(b) -> H hs=0 [KW["preinitialization"] "(" b ")"]

  aspectj-to-box :
    StaticInitExec(b) -> H hs=0 [KW["staticinitialization"] "(" b ")"]

  aspectj-to-box :
    GetField(b) -> H hs=0 [KW["get"] "(" b ")"]

  aspectj-to-box :
    SetField(b) -> H hs=0 [KW["set"] "(" b ")"]

  aspectj-to-box :
    Handler(b) -> H hs=0 [KW["handler"] "(" b ")"]

  aspectj-to-box :
    AdviceExec() -> H hs=0 [KW["adviceexecution"] "(" ")"]

  aspectj-to-box :
    Within(b) -> H hs=0 [KW["within"] "(" b ")"]

  aspectj-to-box :
    WithinCode(b) -> H hs=0 [ KW["withincode"] "(" b ")"]

  aspectj-to-box :
    CFlow(b) -> H hs=0 [ KW["cflow"] "(" b ")"]

  aspectj-to-box :
    CFlowBelow(b) -> H hs=0 [ KW["cflowbelow"] "(" b ")"]

  aspectj-to-box :
    If(b) -> H hs=0 [ KW["if"] "(" b ")"]

  aspectj-to-box :
    This(b) -> H hs=0 [ KW["this"] "(" b ")"]

  aspectj-to-box :
    Target(b) -> H hs=0 [ KW["target"] "(" b ")"]

  aspectj-to-box :
    Args(params) -> H hs=0 [ KW["args"] b]
    where
      <list-to-args> params => b

  aspectj-to-box :
    NamedPointcut(b1, params) -> H hs=0 [ b1 b2 ]
    where
      <list-to-args> params => b2

/**
 * Annotation pointcuts
 */      
rules

  aspectj-to-box :
    AtThis(b) -> H hs=0 ["@this" "(" b ")" ]

  aspectj-to-box :
    AtTarget(b) -> H hs=0 ["@target" "(" b ")" ]

  aspectj-to-box :
    AtWithin(b) -> H hs=0 ["@within" "(" b ")" ]

  aspectj-to-box :
    AtWithinCode(b) -> H hs=0 ["@withincode" "(" b ")" ]

  aspectj-to-box :
    AtAnno(b) -> H hs=0 ["@annotation" "(" b ")" ]

  aspectj-to-box :
    AtArgs(args) -> H hs=0 ["@args" b ]
    where 
      <list-to-args> args => b

rules

  aspectj-to-box :
    PointcutName(b) -> box |[ b ]|

  aspectj-to-box :
    PointcutName(b1, b2) -> box |[ H hs=0 [b1 "." b2] ]|
