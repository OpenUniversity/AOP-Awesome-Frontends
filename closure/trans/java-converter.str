module java-converter

imports
	extract_method
	include/Closure
	utils

strategies
	remove-closures-calls:
		ShortClosureJoinpoints(_, _) -> None()

	remove-closures-calls:
		ClosureJoinpoints(_, _, _, _) -> None()

	closures-to-java =
		?ClassDec(head, ClassBody(stms*));
		class := <id>;
		amethods := <new-hashtable>;
		stmt' := <topdown(try(closure-to-java(|amethods, stms*)))>stms*;
		body' := ClassBody(<conc>(stmt', <hashtable-values>amethods));
		!ClassDec(head, body')

	closure-to-java(|amethods, type) =
		!CastRef(
            ClassOrInterfaceType(TypeName(Id("int")), None())
          , <closure-to-java(|amethods)><id>)

	closure-to-java(|amethods) =
		?ClosureJoinpoints(MethodName(_, Id(jp_name)), params*, block, exprs*);
		generated_name := Id(<gen_extracted_method_name>jp_name);
		declared_vars := <new-iset>;
		<add-params(|declared_vars)>params*;
		<extract-block(|declared_vars)>block;
		amethod := MethodDec(
			MethodDecHead(
				[Private()],
				None(),
				ClassOrInterfaceType(TypeName(Id("Object")), None()),
				generated_name,
				params*,
				None()
            ),
            block
		);
		<hashtable-put(|generated_name, amethod)>amethods;
		!Invoke(Method(MethodName(generated_name)), exprs*)

	closure-to-java(|amethods) =
		?ShortClosureJoinpoints(MethodName(_, Id(jp_name)), block);
		<debug>"in short";
		generated_name := Id(<gen_extracted_method_name>jp_name);
		declared_vars := <new-iset>;
		<extract-block(|declared_vars)>block;
		amethod := MethodDec(
			MethodDecHead(
				[Private()],
				None(),
				ClassOrInterfaceType(TypeName(Id("Object")), None()),
				generated_name,
				[],
				None()
            ),
            block
		);
		<hashtable-put(|generated_name, amethod)>amethods;
		!Invoke(Method(MethodName(generated_name)), [])
