/*
class t9 {
 	
 	int a, b, c;
 	
	public void foo(int j) {
		int y = 9;
		
		A.b() pointcutargs pp1(int, B):call(thisblock) {
			int n = 1;
			A.c() {
				int k = n + y;
			};
		};
		
		System.out.println("k = " + k);
	}
}
*/
/*
aspect Agent {
	// @AA(t = {A.class, a.B.class})
	// public pointcut g(int a, boolean b);
	
//	 public pointcut sivan(): call(@ThisBlock(32424) * a(int, boolean));
	
      public joinpoint boolean testing(boolean b) pointcutargs test(boolean b), arik(int a) handles a.b.IOException, Exception throws NetworkException = false;
	// public scoped joinpoint int A(int t) ;
	// 
	// pointcut A():within(@Monitor *);
	// before() : A() {
	// 	Syste();
	// }
	// void createTrip(Person p, Flight f, Hotel h) {
	// 	local.tmp(level);
	// 	int b = 5;
	// 	int d;
	// 	TranConcern.enterTras() {
	// 		d = b;
	// 		f.resereveSeat(p);les
	// 		h.reserveRoom(p);
	// 	};
	// }
	
}
*/

/*
public class Main {

        public static void main(String[] args) {
                //System.out.println("at Main");
//                int d=0,c= AA.org.aa(7,8) pointcutargs mm(int y):call(* Main.*(int)) { int g = c; }, e=7;
                a = b.c.Arik.aa(7.8) {
                        System.out.println("in scoped block");
                        new Main().foo(5);
                };
                //new Main().foo(5);
                //System.out.println("g = " + 60);
        }
}
*/

package oror.ab.c.d;
public aspect Arik {
 
 // declare error nomatch by package:
 // 	call(* Stam()):
 // 		call(* *(..)):
 // 			"my error";


  pointcut aa(): call(!ejp(G.H.boo));
  // pointcut aa(): call(* *(..));
 
  // public scoped joinpoint int aa(int a, int b) pointcutargs mm(int b), mm2(); //handles java.io.IOExcpetion ;

  // declare soft : Exception : call(* *.tmp(..));
}


//  before(): call(* *(int)) { 
//  before(int k): tr(k) {
  /*  before(int b): aa$mm(b) {
        System.out.println("advising33!!! v="+b);
  } */

/*
  before(int value): call(* goo(..)) && @withincode(@MethodAnno(value) * *(*)) {
    System.out.println("before calling goo advice " +value );
  }
*/
  
  /*before(): call(* *.foo(int)) && withincode(@Ann(5) * *(*)) {
    System.out.println("calling foo");
  }*/

  //declare error nomatch by ejp: call(* foo(int)): call(* goo(..)): "arik!!!";

  /*before(int k): call(* *(int)) && args(k) {
  }*/

/*@Before("call(* *(int))")
  public void cc() {
        System.out.println("advising5!!!!!");
  }*/
