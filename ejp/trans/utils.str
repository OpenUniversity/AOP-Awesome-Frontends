module utils

imports
  libstratego-lib
  libjava-front
  include/ejp
  aspectj/pretty-print
  
strategies

	gen_ejp_name =
		?MemberName(x);
		!<id>

	gen_ejp_name =
		?MemberName(RefTypePattern(full_aspect_name), joinpoint_name);
		if (<equal>(NamePattern("*"), full_aspect_name))
		then
			!MemberName(joinpoint_name)
		else
			!MemberName(<pp-aspectj-string>MemberName(RefTypePattern(full_aspect_name), joinpoint_name))
		end 

	typename_2_methodname =
		?TypeName(x);
		!MethodName(x)
	
	typename_2_methodname =
		?TypeName(x, y);
		!MethodName(<typename_2_ambname>x, y)

    typename_2_ambname =
    	?TypeName(x);
    	!AmbName(x)

    typename_2_ambname =
    	?TypeName(x, y);
    	!AmbName(<typename_2_ambname>x, y)

    typename_2_ambname =
    	?PackageOrTypeName(x);
    	!AmbName(x)

	typename_2_ambname =
    	?PackageOrTypeName(x, y);
    	!AmbName(<typename_2_ambname>x, y)
    	

    gen_nomatch_pointcut_name =
    	<concat-strings>["nomatch$", <random-string>]

	gen_ejpscope_method_name(|package_name, aspect_name) =
		?MemberName(x);
		if (<?None()>package_name)
		then
			syntetic_method_name := <concat-strings>["ejp$", aspect_name, "$", x]
		else
			syntetic_method_name := <concat-strings>["ejp$", <convert-package-name>package_name, aspect_name, "$", x]
		end;
		!MemberName(RefTypePattern(NamePattern("*")), syntetic_method_name)
		
	convert-package-name =
		?PackageName(ids);
		!<concat-strings><map( \ Id(x) -> <concat-strings>[x, "$"] \ )>ids
	
	gen_ejpscope_method_name(|package_name, aspect_name) =
		?MemberName(_, _);
		<gen_ejpscope_method_name><id>
		
    
	gen_ejpscope_method_name =
		?ExplicitJoinPoint(aspect, Id(joinpoint_name), _);
		!<concat-strings>["ejp$", <gen_ejpscope_method_name_helper>aspect, "$", joinpoint_name]

	gen_ejpscope_method_name_helper =
		?Id(name);
		!name

	gen_ejpscope_method_name_helper =
		?TypeName(Id(type_name));
		!type_name

	gen_ejpscope_method_name_helper =
		?TypeName(package, Id(type_name));
		!<concat-strings>[<gen_ejpscope_method_name_helper>package, "$", type_name]

	gen_ejpscope_method_name_helper =
		?PackageOrTypeName(x, Id(y));
		!<concat-strings>[<gen_ejpscope_method_name_helper>x, "$", y]

	gen_ejpscope_method_name_helper =
		?PackageOrTypeName(Id(x));
		!x

	gen_ejpscope_method_name =
		?MemberName(RefTypePattern(full_aspect_name), joinpoint_name);
		if (<equal>(NamePattern("*"), full_aspect_name))
		then
			!MemberName(<concat-strings>["ejp$", joinpoint_name])
		else
			!MemberName(<concat-strings>["ejp$", <gen_ejpscope_method_name_helper>full_aspect_name, "$", joinpoint_name])
		end
		
	
	gen_ejpscope_method_name_helper	=
		?NamePattern(x);
		!x
	
	gen_ejpscope_method_name_helper	=
		?NamePattern(name_pattern, x);
		!<concat-strings>[<gen_ejpscope_method_name_helper>name_pattern, "$", x]

	random-int =
		<abs><next-random>
		
	random-string =
		<int-to-string><random-int>

	gen-auxilary-class-name =
		result := <concat-strings>["ejpScopedInner", <random-string>];
		<id>result

	gen-auxilary-method-name =
		<concat-strings>["param", <random-string>]
	
	my-hashtable-remove(|first) =
		second := <id>;
		<map( \ x -> <hashtable-remove(|x)>second \ )><iset-elements>first;
		<id>second
	
	my-hashtable-union(|first) =
		second := <id>;
		<map( \ x -> <my-hashtable-union-helper(|first, second)>x \ )><hashtable-keys>first;
		<id>second
	
	my-hashtable-union-helper(|first, second) =
		element := <id>;
		<hashtable-remove(|element)>second;
		<hashtable-put(|element, <hashtable-get(|element)>first)>second
	
	/* according to http://releases.strategoxt.org/strategoxt-manual/unstable/manual/chunk-chapter/bk01pt04ch24.html#id3327562
    	the default hashtable should support map key to multiple values, and get the values as list by hashtable-get strategy,
    	but in practice it doesn't work so I need to use this utility method for that */
    add-key-to-multiple-values-table(|x, y) =
    	table := <id>;
    	if (<elem>(x, <hashtable-keys>table))
    	then
    		<hashtable-put(|x, <conc>(<hashtable-get(|x)>table, [y]))>table
    	else
    		<hashtable-put(|x, [y])>table
    	end
    
    allow-extends(s1 | stms*) =
    	<id><allow-extends(s1, id | stms*)>
    	
    allow-extends(s1, s2 | stms*) =
    	<concat><all(allow-extends-helper(s1, s2))>stms*
    
    allow-extends-helper(s1, s2) =
    	stms := <id>;
    	if (result := <s1>stms)
    	then
    		if (<is-list>result)
    		then
    			!result
    		else
    			![result]
    		end
    	else
    		![<s2>stms]
    	end
    
    fetch-type =
    	source := <id>;
    	switch id
    	case ?Lit(String(_)):
    		!Lit(String([Chars("String")]))
    	case ?Lit(Char(_)):
    		!Lit(String([Chars("char")]))
    	otherwise:
    		!Lit(String([Chars(<pp-java5-to-string>source)]))
    	end
    	
    aj-type-to-java-type =
    	source := <id>;
    	switch id
    	case ?PrimTypePattern(x):
    		<id>x
    	case ?RefTypePattern(NamePattern(x)):
    		!ClassOrInterfaceType(TypeName(Id(x)), None())
    	end
    