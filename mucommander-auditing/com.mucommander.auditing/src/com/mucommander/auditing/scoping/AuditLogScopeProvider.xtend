/*
 * generated by Xtext 2.9.0
 */
package com.mucommander.auditing.scoping

import com.google.inject.Inject
import com.mucommander.auditing.SuppressingLinkingResource
import com.mucommander.auditing.auditLog.AuditLogPackage
import com.mucommander.auditing.auditLog.Command
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.common.types.JvmField
import org.eclipse.xtext.common.types.util.TypeReferences
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.FilteringScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AuditLogScopeProvider extends AbstractAuditLogScopeProvider {

	@Inject
	private TypeReferences typeReferences;

	override getScope(EObject context, EReference reference) {
	 switch context {
	 	case reference == AuditLogPackage.Literals.COMMAND__TYPE:
	 	{
	 		var a = super.getScope(context, reference)
	 		new FilteringScope(a, [i|i.name.toString.startsWith("com.mucommander.job.impl")])
	 	}

  	case reference == AuditLogPackage.Literals.CASE__MSG ||
  	     reference == AuditLogPackage.Literals.COMMAND__DEFAULT:
				return Scopes.scopeFor(SuppressingLinkingResource.auditLogMessages.declaredFields,[
    	            f|QualifiedName.create(f.simpleName)
     	   ], IScope.NULLSCOPE )

   case reference == AuditLogPackage.Literals.CASE__FIELDS:
   {
    var command = context.eContainer as Command
   	return Scopes.scopeFor(command.type.allFeatures.filter(typeof(JvmField)).filter[JvmField f|typeReferences.is(f.type, boolean)],[
                f|QualifiedName.create(f.simpleName)
        ], IScope.NULLSCOPE )
   }

   case reference == AuditLogPackage.Literals.CASE__VARS:
   {
    var command = context.eContainer as Command
   	return Scopes.scopeFor(command.type.allFeatures.filter(typeof(JvmField)),[
                f|QualifiedName.create(f.simpleName)
        ], IScope.NULLSCOPE )
   }

			default: super.getScope(context, reference)
		}
	}
}

 