/*
 * generated by Xtext
 */
package org.ovirt.engine.auditing.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.ovirt.engine.auditing.auditLog.Command
import org.ovirt.engine.auditing.auditLog.Case
import org.ovirt.engine.auditing.auditLog.Clause
import org.eclipse.xtext.common.types.JvmField

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AuditLogGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		fsa.generateFile("org/ovirt/engine/core/bll/AuditLogs.aj",
			'''
				package org.ovirt.engine.core.bll;
				
				import java.util.*;
				import org.ovirt.engine.core.common.AuditLogType;
				import org.ovirt.engine.core.bll.CommandActionState;

				public privileged aspect AuditLogs {
					«FOR command:resource.allContents.filter(typeof(Command)).toIterable»
						«command.compile»
					«ENDFOR»
				}
			'''
		)
	}

	def compile(Command command) '''
		AuditLogType around(«command.type.qualifiedName» command): execution(* getAuditLogTypeValue()) && this(command) {
			«FOR acase:command.cases»
				«acase.compile»
			«ENDFOR»
			return «IF command.overrides»AuditLogType.UNASSIGNED«ELSE»proceed(command)«ENDIF»;
		}

	'''

	def compile(Case acase) '''
		if (command.getActionState() == CommandActionState.«acase.actionState.simpleName»«acase.clause.compile»«IF acase.internal» && command.isInternalExecution()«ENDIF»«FOR f:acase.fields»«f.compile»«ENDFOR»)
			return AuditLogType.«acase.msg.simpleName»;
	'''

    def compile(Clause clause) {
    	switch clause {
    	case SUCESS: ' && command.getSucceeded()'
    	case FAILURE: ' && !command.getSucceeded()'
    	}
    }

    def compile(JvmField field) ''' && command.«field.simpleName»'''
}
