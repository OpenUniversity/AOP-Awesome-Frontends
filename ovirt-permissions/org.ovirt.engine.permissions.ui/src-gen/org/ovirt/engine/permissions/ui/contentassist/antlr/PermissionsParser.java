/*
 * generated by Xtext
 */
package org.ovirt.engine.permissions.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.ovirt.engine.permissions.services.PermissionsGrammarAccess;

public class PermissionsParser extends AbstractContentAssistParser {
	
	@Inject
	private PermissionsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.ovirt.engine.permissions.ui.contentassist.antlr.internal.InternalPermissionsParser createParser() {
		org.ovirt.engine.permissions.ui.contentassist.antlr.internal.InternalPermissionsParser result = new org.ovirt.engine.permissions.ui.contentassist.antlr.internal.InternalPermissionsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
					put(grammarAccess.getCommandAccess().getGroup_4(), "rule__Command__Group_4__0");
					put(grammarAccess.getCommandAccess().getGroup_4_1(), "rule__Command__Group_4_1__0");
					put(grammarAccess.getPermissionAccess().getGroup(), "rule__Permission__Group__0");
					put(grammarAccess.getPermissionAccess().getGroup_6(), "rule__Permission__Group_6__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getModelAccess().getCommandsAssignment(), "rule__Model__CommandsAssignment");
					put(grammarAccess.getCommandAccess().getTypeAssignment_1(), "rule__Command__TypeAssignment_1");
					put(grammarAccess.getCommandAccess().getOverridesAssignment_2(), "rule__Command__OverridesAssignment_2");
					put(grammarAccess.getCommandAccess().getPermissionsAssignment_4_0(), "rule__Command__PermissionsAssignment_4_0");
					put(grammarAccess.getCommandAccess().getPermissionsAssignment_4_1_1(), "rule__Command__PermissionsAssignment_4_1_1");
					put(grammarAccess.getPermissionAccess().getObjectTypeAssignment_1(), "rule__Permission__ObjectTypeAssignment_1");
					put(grammarAccess.getPermissionAccess().getObjectIdAssignment_3(), "rule__Permission__ObjectIdAssignment_3");
					put(grammarAccess.getPermissionAccess().getActionGroupAssignment_5(), "rule__Permission__ActionGroupAssignment_5");
					put(grammarAccess.getPermissionAccess().getConditionalAssignment_6_0(), "rule__Permission__ConditionalAssignment_6_0");
					put(grammarAccess.getPermissionAccess().getConditionAssignment_6_1(), "rule__Permission__ConditionAssignment_6_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.ovirt.engine.permissions.ui.contentassist.antlr.internal.InternalPermissionsParser typedParser = (org.ovirt.engine.permissions.ui.contentassist.antlr.internal.InternalPermissionsParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PermissionsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PermissionsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
