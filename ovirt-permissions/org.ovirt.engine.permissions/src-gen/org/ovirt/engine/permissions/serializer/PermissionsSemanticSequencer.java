/*
 * generated by Xtext
 */
package org.ovirt.engine.permissions.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.ovirt.engine.permissions.permissions.Command;
import org.ovirt.engine.permissions.permissions.Model;
import org.ovirt.engine.permissions.permissions.Permission;
import org.ovirt.engine.permissions.permissions.PermissionsPackage;
import org.ovirt.engine.permissions.services.PermissionsGrammarAccess;

@SuppressWarnings("all")
public class PermissionsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PermissionsGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == PermissionsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case PermissionsPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case PermissionsPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case PermissionsPackage.PERMISSION:
				sequence_Permission(context, (Permission) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (type=[JvmDeclaredType|QualifiedName] overrides?='overrides'? (permissions+=Permission permissions+=Permission*)?)
	 */
	protected void sequence_Command(EObject context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     commands+=Command*
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         objectType=[JvmEnumerationLiteral|ID] 
	 *         objectId=[JvmOperation|ID] 
	 *         actionGroup=[JvmEnumerationLiteral|ID] 
	 *         (conditional?='if' condition=[JvmOperation|ID])?
	 *     )
	 */
	protected void sequence_Permission(EObject context, Permission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
