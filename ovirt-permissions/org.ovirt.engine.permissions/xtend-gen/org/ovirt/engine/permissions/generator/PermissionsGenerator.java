/**
 * generated by Xtext
 */
package org.ovirt.engine.permissions.generator;

import com.google.common.collect.Iterators;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmEnumerationLiteral;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.ovirt.engine.permissions.permissions.Command;
import org.ovirt.engine.permissions.permissions.Permission;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PermissionsGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package org.ovirt.bll;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("import org.aspectj.*;");
    _builder.newLine();
    _builder.append("import org.ovirt.engine.core.common.businessentities.VdcObjectType;");
    _builder.newLine();
    _builder.append("import org.ovirt.engine.core.common.businessentities.ActionGroup;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Aspect");
    _builder.newLine();
    _builder.append("public class Permissions {");
    _builder.newLine();
    {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterator<Command> _filter = Iterators.<Command>filter(_allContents, Command.class);
      Iterable<Command> _iterable = IteratorExtensions.<Command>toIterable(_filter);
      for(final Command command : _iterable) {
        _builder.append("\t");
        CharSequence _compile = this.compile(command);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile("greetings.java", _builder);
  }
  
  public CharSequence compile(final Command command) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Around(\"execution(* getPermissionCheckSubjects()) && this(command)\")");
    _builder.newLine();
    _builder.append("public List<PermissionSubject> permissionsFor");
    JvmDeclaredType _type = command.getType();
    String _simpleName = _type.getSimpleName();
    _builder.append(_simpleName, "");
    _builder.append("(");
    JvmDeclaredType _type_1 = command.getType();
    String _qualifiedName = _type_1.getQualifiedName();
    _builder.append(_qualifiedName, "");
    _builder.append(" command) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("List<PermissionSubject> permissions = ");
    {
      boolean _isOverrides = command.isOverrides();
      if (_isOverrides) {
        _builder.append("new ArrayList<>(proceed(command));");
      } else {
        _builder.append("new ArrayList<>();");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Permission> _permissions = command.getPermissions();
      for(final Permission permission : _permissions) {
        _builder.append("\t");
        CharSequence _compile = this.compile(permission);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("return permissions;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Permission permission) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("try {");
    _builder.newLine();
    {
      boolean _isConditional = permission.isConditional();
      if (_isConditional) {
        _builder.append("\t");
        _builder.append("if (command.");
        JvmOperation _condition = permission.getCondition();
        String _simpleName = _condition.getSimpleName();
        _builder.append(_simpleName, "\t");
        _builder.append("()) {");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("permissions.add(new PermissionSubject(");
    JvmOperation _objectId = permission.getObjectId();
    String _simpleName_1 = _objectId.getSimpleName();
    _builder.append(_simpleName_1, "\t\t\t");
    _builder.append("(),");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("VdcObjectType.");
    JvmEnumerationLiteral _objectType = permission.getObjectType();
    String _simpleName_2 = _objectType.getSimpleName();
    _builder.append(_simpleName_2, "\t\t\t\t");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("ActionGroup.");
    JvmEnumerationLiteral _actionGroup = permission.getActionGroup();
    String _simpleName_3 = _actionGroup.getSimpleName();
    _builder.append(_simpleName_3, "\t\t\t\t");
    _builder.append("));");
    _builder.newLineIfNotEmpty();
    {
      boolean _isConditional_1 = permission.isConditional();
      if (_isConditional_1) {
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("} catch(Exception e) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.err.println(\"Could not add permission subject\"); ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
